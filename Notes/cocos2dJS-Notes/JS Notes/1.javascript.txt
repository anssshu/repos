Javascript Notes
-----------------

1.Basic Building Blocks,  2.Flow of Control(conditions and loops),  3.Function,
4.Data Structures(Array), 5.Objects, 6.Files, 7.Exception Handling,
8.Module and Packages

Hello World program in javascript
---------------------------------
console.log("Hello World");

or 

alert("Hello World");
//complete examle helloWorld.html
<html>
<head>
</head>
<body>

<script>
var el=document.createElement("myElm");
el.innerHTML="Hello World"
document.body.appendChild(el);
</script>
</body>

</html>

#JavaScript uses the unicode character set
---------------------------------------------------------------------------------------------------------------------------------------------
				1).Basic Building Blocks
data types,statements,values,literals,variables,Strings,expressions,operators,keywords,comments,character sets
---------------------------------------------------------------------------------------------------------------------------------------------
comments
########
//this is a comment
/* this is not going to be evaluated */

DATA TYPES IN JAVASCRIPT

				a)data types(.Number,String,Array,Objects,Boolean and more)

// Type conversion
x.toString()
(123).toString()
(100 + 23).toString()


//Declaration of variables(identifier) of different data types
examples
 var x=23;//syntax for declaration
 var y= new Array();
 var name="rajesh"
 var y=["car","wheel","232"];
 var status=true;
 var x='c';
 var obj=new Object();
 var t=new Array();
 var obj1={"name":"rohan",age:24};
Boolean(2<10);//returns true
true ,false---boolean
//finding data type of a variable

typeof x;// returns String     
                                b)keywords
//there are certain reserved words which can't be used as identifiers
//they have pre defined meaings
example 
for,function,Object,Array,case,switch,

				c)values(variable and literals)

//values are of two types variables and literals
variable----their value changes
ex--var x=23;x=24;/x is variable

literals-----values of literals are constant

var x="himalayas",x=27.6,x=Math.PI
"himalayas",27,27.6,Math.PI----these are literals and x is variable


				d).operators

2*3
2/3
4+4
5-1
var=x;
x=2
x==2;//true
2==4//false

x||Y

X && Y

!x

assignmment
x=y;
y=23;
				e).expressions

//part of a statement which has got a complete meaning

//values and operators are used to make expressions
w=23+t
v=u + a*t

				f).statements 
  
;//empty statement

// simple statements
//expressions followed by semicolon(;)---tells computer to take a meaningful action or evaluation
//these can be a group of expressions inside {}
examples
n=m+4;

k=23*e+x;
//compound statement

	{ var x=24;
 	var y=35;
	var z=x+y;
	}


{ 
	{
		var x=23;
  		var y=29;
	}
   
console.log("hello world");
}                           
                               
---------------------------------------------------------------------------------------------------------------------------------------------

			        	2).Flow of controls
---------------------------------------------------------------------------------------------------------------------------------------------
a)Conditions
################################################
i) if else statement

	if (condition){                                                                                                                                                                                                                                                                                     
			expression1;
			exp2;
			exp3;
			...
			...
			}
       else if (condition){exp block}
       .
       .
       .
       else {exp block}
 
 example  :- if (x==2){console.log("value of input is 2");}

ii)switch case statement

switch(expression) {
    case n:
        code block
        break;
    case n:
        code block
        break;
    default:
        default code block
}




example

switch (new Date().getDay()) {
    case 0:
        day = "Sunday";
        break;
    case 1:
        day = "Monday";
        break;
    case 2:
        day = "Tuesday";
        break;
    case 3:
        day = "Wednesday";
        break;
    case 4:
        day = "Thursday";
        break;
    case 5:
        day = "Friday";
        break;
    case 6:
        day = "Saturday";
        break;
}

###########################################
b)LOOPS
#############################################
i)for loop

for (statement 1; statement 2; statement 3) {
    code block to be executed
}

example
/////////////////////////////////
for (i = 0; i < 5; i++) {
    console.log(i);
}
////////////////////////////////
var i = 2;
var len = cars.length;
var text = "";
for (; i < len; i++) {
    text += cars[i] + "<br>";
}
////////////////////////////////

var i = 0;
var len = cars.length;
for (; i < len; ) {
    text += cars[i] + "<br>";
    i++;
}
///////////////////////////////////
for in loop
###########

var person = {fname:"John", lname:"Doe", age:25};

var text = "";
var x;
for (x in person) {
    text += person[x];
}
//////////////////////////////////

ii)While loop
######################
syntax

while (condition) {
    code block to be executed
}
example
/////////////////////////////////
while (i < 10) {
    text += "The number is " + i;
    i++;
}
////////////////////////////////
iii)Do While loop
################################
Syntax
do {
    code block to be executed
}
while (condition);
//////////////////////////////
example
do {
    text += "The number is " + i;
    i++;
}
while (i < 10);
iv)Break Statement
#####################
for (i = 0; i < 10; i++) {
    if (i == 3) break;
    text += "The number is " + i + "<br>";
}
////////////////////////////////////

v)Continue Statement
########################
for (i = 0; i <= 10; i++) {
    if (i == 3) continue;
    text += "The number is " + i + "<br>";
}
/////////////////////////////////////
---------------------------------------------------------------------------------------------------------------------------------------------

							3.Functions
---------------------------------------------------------------------------------------------------------------------------------------------
function functionName(parameters) {
  code to be executed
}
//////////////////////////////////////////
var func_name = function(arg1,arg2,...){

exp1;exp2.......

}
///////////////////////////////////////
or

function func_name(arg1,...){block of code}


example
function myFunction(a, b) {
    return a * b;
}
//////////////////////////////////
var x = function (a, b) {return a * b};
////////////////////////////////////////
var x = function (a, b) {return a * b};
var z = x(4, 3);
/////////////////////////////////////////
var myFunction = new Function("a", "b", "return a * b");

var x = myFunction(4, 3);
//////////////////////////////////////////////
var myFunction = function (a, b) {return a * b};

var x = myFunction(4, 3);
////////////////////////////////////////////
self invoking funnction
(function () {
    var x = "Hello!!";      // I will invoke myself
})();
////////////////////////////////////////	
i)recurssion
##########################################
function  factorial(num)
{
    // If the number is less than 0, reject it.
    if (num < 0) {
        return -1;
    }
    // If the number is 0, its factorial is 1.
    else if (num == 0) {
        return 1;
    }
    // Otherwise, call this recursive procedure again.
    else {
        return (num * factorial(num - 1));
    }
}
//////////////////////////////////////////////////////
ii)unlimited arguments
###################################################
function manyArgs() {
  for (var i = 0; i < arguments.length; ++i)
    alert(arguments[i]);
}
////////////////////////////////////////////////////
---------------------------------------------------------------------------------------------------------------------------------------------------
                                                       4.Data Structue (Arrays and JSON)
---------------------------------------------------------------------------------------------------------------------------------------------------
//collection of data elements are called as data structure
JSON-javascript object notation

JSON object
{"firstName":"John", "lastName":"Doe"}


JSON Array
{"employees":[
    {"firstName":"John", "lastName":"Doe"},
    {"firstName":"Anna", "lastName":"Smith"},
    {"firstName":"Peter", "lastName":"Jones"}
]}

text to JSON

var text = '{ "employees" : [' +
'{ "firstName":"John" , "lastName":"Doe" },' +
'{ "firstName":"Anna" , "lastName":"Smith" },' +
'{ "firstName":"Peter" , "lastName":"Jones" } ]}';

var obj = JSON.parse(text);
///////////////////////////////////////////////////////////



Array
Syntax:
var array-name = [item1, item2, ...];      
Example:
var cars = ["Saab", "Volvo", "BMW"];
Example
var cars = new Array("Saab", "Volvo", "BMW");

//accessing arrays

var name = cars[0];
cars[0] = "Opel";

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.length; 
fruits.sort();
//////////////////////////////////////////////////////////////
var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.valueOf();

var fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.toString();

<p id="demo"></p>

<script>
var fruits = ["Banana", "Orange","Apple", "Mango"];
document.getElementById("demo").innerHTML = fruits.join(" * ");
</script>


var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();              // Removes the last element ("Mango") from fruits

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi");       //  Adds a new element ("Kiwi") to fruits

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();            // Removes the first element "Banana" from fruits

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon");    // Adds a new element "Lemon" to fruits

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[0] = "Kiwi";        // Changes the first element of fruits to "Kiwi"

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits[fruits.length] = "Kiwi";          // Appends "Kiwi" to fruit

var fruits = ["Banana", "Orange", "Apple", "Mango"];
delete fruits[0];           // Changes the first element in fruits to undefined

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi");

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(0,1);        // Removes the first element of fruits


var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();            // Sorts the elements of fruits

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();            // Sorts the elements of fruits
fruits.reverse();         // Reverses the order of the elements

var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a-b});

var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b-a});

function(a, b){return a-b}

var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b-a});
// now points[0] contains the highest value

var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a-b});
// now points[0] contains the lowest value


var myGirls = ["Cecilie", "Lone"];
var myBoys = ["Emil", "Tobias","Linus"];
var myChildren = myGirls.concat(myBoys);     // Concatenates (joins) myGirls and myBoys


var arr1 = ["Cecilie", "Lone"];
var arr2 = ["Emil", "Tobias","Linus"];
var arr3 = ["Robin", "Morgan"];
var myChildren = arr1.concat(arr2, arr3);     // Concatenates arr1 with arr2 and arr3

var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(1,3);


---------------------------------------------------------------------------------------------------------------------------------------------------
                                                       5.Objects and Class
---------------------------------------------------------------------------------------------------------------------------------------------------
var x=new Object();
var car={"color":"red","power":"80 hp","max-speed":130}
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
//////////////////////////////////////////////////////////////////////////
// Object Constructor

function Graph() {
  this.vertices = [];
  this.edges = [];
}

Graph.prototype = {
  addVertex: function(v){
    this.vertices.push(v);
  }

Graph.prototype.startPoint=[0,0];


};

var g = new Graph();

/////////////////////////////////////////////////////////////////////////

var person = {
    firstName:"John",
    lastName:"Doe",
    age:50,
    eyeColor:"blue",
    changeName:function(name){
this.firstName=name}

}


person.lastName;

person["lastName"];

delete person.age;

//////////////////////////////
Object Methods
function person(firstname, lastname, age, eyecolor) {
    this.firstname = firstname; 
    this.lastname = lastname;
    this.age = age;
    this.eyecolor = eyecolor;
    this.changeName = function (name) {
        this.lastname = name;
    }
}

myMother.changeName("Doe");

//////////////////////////////////
using prototype
//the constructor function
function person(first, last, age, eyecolor) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eyecolor;
}
person.prototype.name = function() {	
    return this.firstName + " " + this.lastName;
};

person.prototype.nationality = "English";

////////////////////////////////////////////
Inheritance (single and multiple inheritence can be created with the class.call(this) method inside the constructor
#####################################
/////////////////////////////////////////////////////////////////
 // I am the Person class.
function Person( name ){
this.name = name;
}
// Define the class methods.
Person.prototype = {
// I swing this person in the trees.
swing: function(){
return( "Ouch! My hands!" );
},
// I walk this person.
walk: function(){
return( "Walk this way!" );
}
};
// -------------------------------------------------- //
// -------------------------------------------------- //
// I am the Monkey class.
function Monkey( isFriendly ){
this.isFriendly = isFriendly;
}
// Define the class methods.
Monkey.prototype = {
// I swing this person in the trees.
swing: function(){
return( "Weeeeee! I feel so free!" );
},
// I walk this monkey.
walk: function(){
return( "Ouch! My hands!" );
}
};
// -------------------------------------------------- //
// -------------------------------------------------- //
// I am the Ben class.
function Ben(){
// Call the super constructors of the base classes.
Person.call( this, "Ben" );
Monkey.call( this, true );
}
// Define the class methods.
Ben.prototype = {
// I give people a high-five!
highFive: function( person ){
return( "Hey " + person.name + ", high five!" );
},
// I walk this Ben. While I inherit mostly from Monkey,
// I can actually walk like a Person; as such, we need
// to explicitly call the more appropriate super method.
walk: function(){
return(
Person.prototype.walk.call( this )
);
}
};
// The Ben class exnteds both the Person and Monkey class
// (or so I'm told by my friends). Here, we are going to use
// jQuery's .extend() method to augment the existing Ben
// prototype. Notice that Ben comes LAST! The order of
// inheritance matters here as the class methods will
// overwrite each other.
Ben.prototype = $.extend(
{},
Person.prototype,
Monkey.prototype,
Ben.prototype
);
// -------------------------------------------------- //
// -------------------------------------------------- //
// -------------------------------------------------- //
// -------------------------------------------------- //
// Create a new Ben object.
var ben = new Ben();
// Try to walk and swing.
console.log( "Walking:", ben.walk() );
console.log( "Swinging:", ben.swing() );
// Try to give a high-five to someone.
console.log(
"High-five:",
ben.highFive( new Person( "Jill" ) )
);

//////////////////////////////////////////////////////////////
function Employee() {
  this.name = "";
  this.dept = "general";
}

function Manager() {
  Employee.call(this);
  this.reports = [];
}
Manager.prototype = Object.create(Employee.prototype);

function WorkerBee() {
  Employee.call(this);
  this.projects = [];
}
WorkerBee.prototype = Object.create(Employee.prototype);

function SalesPerson() {
   WorkerBee.call(this);
   this.dept = "sales";
   this.quota = 100;
}
SalesPerson.prototype = Object.create(WorkerBee.prototype);

function Engineer() {
   WorkerBee.call(this);
   this.dept = "engineering";
   this.machine = "";
}
Engineer.prototype = Object.create(WorkerBee.prototype);
//////////////////////////////////////////////////////////
// inheritence with constructor inputs
function Engineer (name, projs, mach) {
  this.base = WorkerBee;
  this.base(name, "engineering", projs);
  this.machine = mach || "";
}	
/////////////////////////////////////////////////////////////
var a = {a: 1}; 
var b = Object.create(a);
----------------------------------------------------------------------------------------------------------------------------------------------------
                                                      6.Exception Handling
-----------------------------------------------------------------------------------------------------------------------------------------------------

try {
    Block of code to try
}
catch(err) {
    Block of code to handle errors
}
finally {
    Block of code to be executed regardless of the try / catch result
}

-----------------------------------------------------------------------------------------------------------------------------------------------------
                                                      7.Files
-----------------------------------------------------------------------------------------------------------------------------------------------------

as the javascript works inside the browser files cann't be handles with it.with the File HTML element 
files can be uploaded.

local files can be used with the node.js package
-----------------------------------------------------------------------------------------------------------------------------------------------------
						      8.Standard Library
-----------------------------------------------------------------------------------------------------------------------------------------------------
Standrad library in js contains 
global objetcs 

window
document
Array
Object
Function
Date
String


----------------------------------------------------------------------------------------------------------------------------------------------------
                                                      9.Modules and Packages
---------------------------------------------------------------------------------------------------------------------------------------------------
all class function and variable declaration to be written in a file with " .js " extension and loaded in the html file
for access 
<html>
	<head>
		<script src="/<dirname>/<filename>.js"></script>
	</head>
<body>
<script>
// all global functions and variable inside <filename>.js can be used here
</script>
</body>
</html>
---------------------------------------------------------------------------------------------------------------------------------------------------
                                                      10.Special Features
---------------------------------------------------------------------------------------------------------------------------------------------------
String methods

var str = "Please locate where 'locate' occurs!";
var pos = str.indexOf("locate");

x = true;
Number(x);        // returns 1
x = false;     
Number(x);        // returns 0
x = new Date();
Number(x);        // returns 1404568027739
x = "10"
Number(x);        // returns 10
x = "10 20"
Number(x);        // returns NaN

Numbers
var x = 123;
x.toString();            // returns 123 from variable x
(123).toString();        // returns 123 from literal 123
(100 + 23).toString();   // returns 123 from expression 100 + 23

var x = 9.656;
x.toExponential(2);     // returns 9.66e+0
x.toExponential(4);     // returns 9.6560e+0
x.toExponential(6);     // returns 9.656000e+0

var x = 9.656;
x.toFixed(0);           // returns 10
x.toFixed(2);           // returns 9.66
x.toFixed(4);           // returns 9.6560
x.toFixed(6);           // returns 9.656000

var x = 9.656;
x.toPrecision();        // returns 9.656
x.toPrecision(2);       // returns 9.7
x.toPrecision(4);       // returns 9.656
x.toPrecision(6);       // returns 9.65600

x = true;
Number(x);        // returns 1
x = false;     
Number(x);        // returns 0
x = new Date();
Number(x);        // returns 1404568027739
x = "10"
Number(x);        // returns 10
x = "10 20"
Number(x);        // returns NaN


Date
########################
Date Get Methods

Get methods are used for getting a part of a date. Here are the most common (alphabetically):
Method	Description
getDate()	Get the day as a number (1-31)
getDay()	Get the weekday as a number (0-6)
getFullYear()	Get the four digit year (yyyy)
getHours()	Get the hour (0-23)
getMilliseconds()	Get the milliseconds (0-999)
getMinutes()	Get the minutes (0-59)
getMonth()	Get the month (0-11)
getSeconds()	Get the seconds (0-59)
getTime()	Get the time (milliseconds since January 1, 1970)

USE IN THE HTML DOCUMENT


window.alert();//write into the alert box
document.write();//write into the HTML
innerHTML.// write into the documents html part
console.log()//write into the console






